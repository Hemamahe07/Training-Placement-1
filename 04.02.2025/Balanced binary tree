#include <stdio.h>
#include <stdlib.h>

// Define the structure for a binary tree node
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Helper function to check if a tree is balanced and return its height
int isBalancedHelper(struct Node* root, int* height) {
    if (root == NULL) {
        *height = 0;
        return 1; // Empty tree is balanced
    }

    int leftHeight = 0, rightHeight = 0;
    
    int leftBalanced = isBalancedHelper(root->left, &leftHeight);
    int rightBalanced = isBalancedHelper(root->right, &rightHeight);

    *height = (leftHeight > rightHeight ? leftHeight : rightHeight) + 1;

    if (!leftBalanced || !rightBalanced)
        return 0;

    if (abs(leftHeight - rightHeight) > 1)
        return 0;

    return 1;
}

// Function to check if a tree is balanced
int isBalanced(struct Node* root) {
    int height = 0;
    return isBalancedHelper(root, &height);
}

// Main function to test the program
int main() {
    // Creating a balanced binary tree
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->right = createNode(6);

    if (isBalanced(root))
        printf("The tree is balanced.\n");
    else
        printf("The tree is not balanced.\n");

    // Creating an unbalanced binary tree
    struct Node* unbalancedRoot = createNode(1);
    unbalancedRoot->left = createNode(2);
    unbalancedRoot->left->left = createNode(3);
    unbalancedRoot->left->left->left = createNode(4);

    if (isBalanced(unbalancedRoot))
        printf("The tree is balanced.\n");
    else
        printf("The tree is not balanced.\n");

    return 0;
}
