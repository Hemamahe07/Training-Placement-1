#include <stdio.h>
#include <stdlib.h>

// Define the structure for a binary tree node
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to check if two trees are mirror images
int isMirror(struct Node* root1, struct Node* root2) {
    if (root1 == NULL && root2 == NULL)
        return 1;  // Both are NULL, so they are mirrors

    if (root1 == NULL || root2 == NULL)
        return 0;  // One is NULL, so they are not mirrors

    return (root1->data == root2->data) &&
           isMirror(root1->left, root2->right) &&
           isMirror(root1->right, root2->left);
}

// Function to check if a tree is symmetric
int isSymmetric(struct Node* root) {
    if (root == NULL)
        return 1;  // An empty tree is symmetric

    return isMirror(root->left, root->right);
}

// Main function to test the program
int main() {
    // Creating a symmetric binary tree
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(2);
    root->left->left = createNode(3);
    root->left->right = createNode(4);
    root->right->left = createNode(4);
    root->right->right = createNode(3);

    if (isSymmetric(root))
        printf("The tree is symmetric.\n");
    else
        printf("The tree is not symmetric.\n");

    return 0;
}
